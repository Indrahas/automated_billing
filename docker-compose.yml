
version: "3.9"
services:
  zookeeper:
    image: bitnami/zookeeper:3.9
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"

  kafka:
    image: bitnami/kafka:3.7
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
    restart: unless-stopped

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=billing
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro

  ledger-api:
    build:
      context: ./services/ledger-api-py
    environment:
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_USER=postgres
      - PG_PASSWORD=postgres
      - PG_DATABASE=billing
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - LEDGER_API_HTTP_PORT=8080
      - LEDGER_API_GRPC_PORT=50051
    ports:
      - "8080:8080"
      - "50051:50051"
    depends_on:
      - postgres
    command: ["/bin/bash", "-lc", "./start.sh"]

  billing-worker:
    build:
      context: ./services/billing-worker-go
    environment:
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_ORDERS_TOPIC=orders
      - PG_DSN=postgres://postgres:postgres@postgres:5432/billing?sslmode=disable
    depends_on:
      - kafka
      - postgres

  outbox-publisher:
    build:
      context: ./services/outbox-publisher-go
    environment:
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_BILLING_EVENTS_TOPIC=billing.events
      - PG_DSN=postgres://postgres:postgres@postgres:5432/billing?sslmode=disable
    depends_on:
      - kafka
      - postgres

volumes:
  pgdata:
